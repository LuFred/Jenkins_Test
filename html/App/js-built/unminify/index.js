webpackJsonp([0],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function($) {'use strict';\n\nvar _jquery = __webpack_require__(2);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n$(function () {\n  var mindex = '';\n\n  $('.fullPage').fullpage({\n    scrollingSpeed: 500,\n    //index.html#second 直接就是那个页面\n    anchors: ['first', 'second', 'third', 'forth', 'fifth', 'sixth'],\n    //showActiveTooltips: true,\n    scrollBar: true,\n    fitToSection: false,\n    menu: '#menu',\n    css3: true,\n    autoScrolling: true,\n    afterRender: function afterRender() {\n      $(\"iframe\").attr(\"src\", applicationPath + \"/Content/plugs/krpano/index.html\");\n    },\n    // fixedElements:$(\".index_panoramaBox\"),\n    // continuousVertical:true,\n    afterLoad: function afterLoad(index) {\n      mindex = index;\n      if (index === \"first\") {\n        $(\".index_panorama_icons\").css({\n          bottom: \"0\"\n        });\n      }\n      if (index === \"second\") {\n        $(\".index_panorama_icons\").css({\n          bottom: \"-3.04rem\"\n        });\n      }\n    }\n  });\n  $('.index_arrow').on('click', function () {\n    $.fn.fullpage.moveSectionDown();\n  });\n  $(\".iconBtn\").on(\"click\", function () {\n    if (mindex === 'first') {\n      $.fn.fullpage.moveSectionDown();\n      $(\".index_panorama_icons\").css({\n        bottom: \"-3.04rem\"\n      });\n    } else {\n      console.log($($(this).attr('data-content')));\n      var xxx = $(this).attr('data-content');\n\n      $('.' + xxx).css({\n        display: \"block\"\n      }).siblings().css({\n        display: \"none\"\n      });\n      console.log($('.' + xxx));\n    }\n  });\n\n  $(\"#index_nav_logReg\").click(function () {\n    $(\"#register_hidden\").css(\"display\", \"block\");\n  });\n\n  $(\"#close_button\").click(function () {\n    $(\"#register_hidden\").css(\"display\", \"none\");\n    //\t\t\tconsole.log($(this));\n    //\t\t\t$(this).attr(\"data\");\n    //\t\t\tconsole.log(typeof($(this).attr(\"data\")));\n  });\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy92aWV3cy9pbmRleC5qcz84YzkxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7OztBQUVBLEVBQUUsWUFBVztBQUNaLE1BQUksU0FBUyxFQUFiOztBQUVPLElBQUUsV0FBRixFQUFlLFFBQWYsQ0FBd0I7QUFDcEIsb0JBQWdCLEdBREk7QUFFcEI7QUFDQSxhQUFTLENBQUMsT0FBRCxFQUFVLFFBQVYsRUFBb0IsT0FBcEIsRUFBNkIsT0FBN0IsRUFBc0MsT0FBdEMsRUFBK0MsT0FBL0MsQ0FIVztBQUlwQjtBQUNBLGVBQVcsSUFMUztBQU1wQixrQkFBYyxLQU5NO0FBT3BCLFVBQU0sT0FQYztBQVFwQixVQUFNLElBUmM7QUFTcEIsbUJBQWUsSUFUSztBQVVwQixpQkFBWSx1QkFBWTtBQUNwQixRQUFFLFFBQUYsRUFBWSxJQUFaLENBQWlCLEtBQWpCLEVBQXVCLGtCQUFnQixrQ0FBdkM7QUFDSCxLQVptQjtBQWFwQjtBQUNBO0FBQ0EsZUFBVyxtQkFBUyxLQUFULEVBQWdCO0FBQ3ZCLGVBQVMsS0FBVDtBQUNBLFVBQUcsVUFBVSxPQUFiLEVBQXNCO0FBQ2xCLFVBQUUsdUJBQUYsRUFBMkIsR0FBM0IsQ0FBK0I7QUFDM0Isa0JBQVE7QUFEbUIsU0FBL0I7QUFHSDtBQUNELFVBQUcsVUFBVSxRQUFiLEVBQXVCO0FBQ25CLFVBQUUsdUJBQUYsRUFBMkIsR0FBM0IsQ0FBK0I7QUFDM0Isa0JBQVE7QUFEbUIsU0FBL0I7QUFHSDtBQUNKO0FBM0JtQixHQUF4QjtBQTZCUCxJQUFFLGNBQUYsRUFBa0IsRUFBbEIsQ0FBcUIsT0FBckIsRUFBOEIsWUFBVztBQUN4QyxNQUFFLEVBQUYsQ0FBSyxRQUFMLENBQWMsZUFBZDtBQUNBLEdBRkQ7QUFHQSxJQUFFLFVBQUYsRUFBYyxFQUFkLENBQWlCLE9BQWpCLEVBQTBCLFlBQVc7QUFDcEMsUUFBRyxXQUFXLE9BQWQsRUFBdUI7QUFDdEIsUUFBRSxFQUFGLENBQUssUUFBTCxDQUFjLGVBQWQ7QUFDQSxRQUFFLHVCQUFGLEVBQTJCLEdBQTNCLENBQStCO0FBQzlCLGdCQUFRO0FBRHNCLE9BQS9CO0FBR0EsS0FMRCxNQUtPO0FBQ04sY0FBUSxHQUFSLENBQVksRUFBRSxFQUFFLElBQUYsRUFBUSxJQUFSLENBQWEsY0FBYixDQUFGLENBQVo7QUFDQSxVQUFJLE1BQU0sRUFBRSxJQUFGLEVBQVEsSUFBUixDQUFhLGNBQWIsQ0FBVjs7QUFFQSxRQUFFLE1BQU0sR0FBUixFQUFhLEdBQWIsQ0FBaUI7QUFDaEIsaUJBQVM7QUFETyxPQUFqQixFQUVHLFFBRkgsR0FFYyxHQUZkLENBRWtCO0FBQ2pCLGlCQUFTO0FBRFEsT0FGbEI7QUFLQSxjQUFRLEdBQVIsQ0FBWSxFQUFFLE1BQU0sR0FBUixDQUFaO0FBQ0E7QUFDRyxHQWpCTDs7QUFtQkksSUFBRSxtQkFBRixFQUF1QixLQUF2QixDQUE2QixZQUFVO0FBQ3pDLE1BQUUsa0JBQUYsRUFBc0IsR0FBdEIsQ0FBMEIsU0FBMUIsRUFBcUMsT0FBckM7QUFDQSxHQUZFOztBQUlILElBQUUsZUFBRixFQUFtQixLQUFuQixDQUF5QixZQUFXO0FBQ25DLE1BQUUsa0JBQUYsRUFBc0IsR0FBdEIsQ0FBMEIsU0FBMUIsRUFBcUMsTUFBckM7QUFDSDtBQUNBO0FBQ0E7QUFDRyxHQUxEO0FBT0QsQ0FqRUQsRSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGpxdWVyeUZ1bGxwYWdlIGZyb20gJy4uL2xpYi9qcXVlcnkuZnVsbFBhZ2UnO1xyXG5cclxuJChmdW5jdGlvbigpIHtcclxuXHR2YXIgbWluZGV4ID0gJyc7XHJcblxyXG4gICAgICAgICQoJy5mdWxsUGFnZScpLmZ1bGxwYWdlKHtcclxuICAgICAgICAgICAgc2Nyb2xsaW5nU3BlZWQ6IDUwMCxcclxuICAgICAgICAgICAgLy9pbmRleC5odG1sI3NlY29uZCDnm7TmjqXlsLHmmK/pgqPkuKrpobXpnaJcclxuICAgICAgICAgICAgYW5jaG9yczogWydmaXJzdCcsICdzZWNvbmQnLCAndGhpcmQnLCAnZm9ydGgnLCAnZmlmdGgnLCAnc2l4dGgnXSxcclxuICAgICAgICAgICAgLy9zaG93QWN0aXZlVG9vbHRpcHM6IHRydWUsXHJcbiAgICAgICAgICAgIHNjcm9sbEJhcjogdHJ1ZSxcclxuICAgICAgICAgICAgZml0VG9TZWN0aW9uOiBmYWxzZSxcclxuICAgICAgICAgICAgbWVudTogJyNtZW51JyxcclxuICAgICAgICAgICAgY3NzMzogdHJ1ZSxcclxuICAgICAgICAgICAgYXV0b1Njcm9sbGluZzogdHJ1ZSxcclxuICAgICAgICAgICAgYWZ0ZXJSZW5kZXI6ZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJChcImlmcmFtZVwiKS5hdHRyKFwic3JjXCIsYXBwbGljYXRpb25QYXRoK1wiL0NvbnRlbnQvcGx1Z3Mva3JwYW5vL2luZGV4Lmh0bWxcIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8vIGZpeGVkRWxlbWVudHM6JChcIi5pbmRleF9wYW5vcmFtYUJveFwiKSxcclxuICAgICAgICAgICAgLy8gY29udGludW91c1ZlcnRpY2FsOnRydWUsXHJcbiAgICAgICAgICAgIGFmdGVyTG9hZDogZnVuY3Rpb24oaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIG1pbmRleCA9IGluZGV4O1xyXG4gICAgICAgICAgICAgICAgaWYoaW5kZXggPT09IFwiZmlyc3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICQoXCIuaW5kZXhfcGFub3JhbWFfaWNvbnNcIikuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBcIjBcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoaW5kZXggPT09IFwic2Vjb25kXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAkKFwiLmluZGV4X3Bhbm9yYW1hX2ljb25zXCIpLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogXCItMy4wNHJlbVwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcblx0JCgnLmluZGV4X2Fycm93Jykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcblx0XHQkLmZuLmZ1bGxwYWdlLm1vdmVTZWN0aW9uRG93bigpO1xyXG5cdH0pXHJcblx0JChcIi5pY29uQnRuXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcblx0XHRpZihtaW5kZXggPT09ICdmaXJzdCcpIHtcclxuXHRcdFx0JC5mbi5mdWxscGFnZS5tb3ZlU2VjdGlvbkRvd24oKTtcclxuXHRcdFx0JChcIi5pbmRleF9wYW5vcmFtYV9pY29uc1wiKS5jc3Moe1xyXG5cdFx0XHRcdGJvdHRvbTogXCItMy4wNHJlbVwiXHJcblx0XHRcdH0pO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y29uc29sZS5sb2coJCgkKHRoaXMpLmF0dHIoJ2RhdGEtY29udGVudCcpKSk7XHJcblx0XHRcdHZhciB4eHggPSAkKHRoaXMpLmF0dHIoJ2RhdGEtY29udGVudCcpO1xyXG5cclxuXHRcdFx0JCgnLicgKyB4eHgpLmNzcyh7XHJcblx0XHRcdFx0ZGlzcGxheTogXCJibG9ja1wiXHJcblx0XHRcdH0pLnNpYmxpbmdzKCkuY3NzKHtcclxuXHRcdFx0XHRkaXNwbGF5OiBcIm5vbmVcIlxyXG5cdFx0XHR9KTtcclxuXHRcdFx0Y29uc29sZS5sb2coJCgnLicgKyB4eHgpKTtcclxuXHRcdH1cclxuICAgICB9KVxyXG5cdFxyXG4gICAgICQoXCIjaW5kZXhfbmF2X2xvZ1JlZ1wiKS5jbGljayhmdW5jdGlvbigpe1xyXG5cdFx0XHQkKFwiI3JlZ2lzdGVyX2hpZGRlblwiKS5jc3MoXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XHJcblx0XHR9KVxyXG5cclxuXHRcdCQoXCIjY2xvc2VfYnV0dG9uXCIpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHQkKFwiI3JlZ2lzdGVyX2hpZGRlblwiKS5jc3MoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuLy9cdFx0XHRjb25zb2xlLmxvZygkKHRoaXMpKTtcclxuLy9cdFx0XHQkKHRoaXMpLmF0dHIoXCJkYXRhXCIpO1xyXG4vL1x0XHRcdGNvbnNvbGUubG9nKHR5cGVvZigkKHRoaXMpLmF0dHIoXCJkYXRhXCIpKSk7XHJcblx0XHR9KVxyXG5cclxufSlcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2pzL3ZpZXdzL2luZGV4LmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 1 */,
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';/*!\n * fullPage 2.7.9\n * https://github.com/alvarotrigo/fullPage.js\n * @license MIT licensed\n *\n * Copyright (C) 2015 alvarotrigo.com - A project by Alvaro Trigo\n */(function(global,factory){'use strict';if(true){!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function($){return factory($,global,global.document,global.Math);}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));}else if(typeof exports!=='undefined'){module.exports=factory(require('jquery'),global,global.document,global.Math);}else{factory(jQuery,global,global.document,global.Math);}})(typeof window!=='undefined'?window:undefined,function($,window,document,Math,undefined){'use strict';// keeping central set of classnames and selectors\nvar WRAPPER='fullpage-wrapper';var WRAPPER_SEL='.'+WRAPPER;// slimscroll\nvar SCROLLABLE='fp-scrollable';var SCROLLABLE_SEL='.'+SCROLLABLE;var SLIMSCROLL_BAR_SEL='.slimScrollBar';var SLIMSCROLL_RAIL_SEL='.slimScrollRail';// util\nvar RESPONSIVE='fp-responsive';var NO_TRANSITION='fp-notransition';var DESTROYED='fp-destroyed';var ENABLED='fp-enabled';var VIEWING_PREFIX='fp-viewing';var ACTIVE='active';var ACTIVE_SEL='.'+ACTIVE;var COMPLETELY='fp-completely';var COMPLETELY_SEL='.'+COMPLETELY;// section\nvar SECTION_DEFAULT_SEL='.section';var SECTION='fp-section';var SECTION_SEL='.'+SECTION;var SECTION_ACTIVE_SEL=SECTION_SEL+ACTIVE_SEL;var SECTION_FIRST_SEL=SECTION_SEL+':first';var SECTION_LAST_SEL=SECTION_SEL+':last';var TABLE_CELL='fp-tableCell';var TABLE_CELL_SEL='.'+TABLE_CELL;var AUTO_HEIGHT='fp-auto-height';var AUTO_HEIGHT_SEL='.fp-auto-height';var NORMAL_SCROLL='fp-normal-scroll';var NORMAL_SCROLL_SEL='.fp-normal-scroll';// section nav\nvar SECTION_NAV='fp-nav';var SECTION_NAV_SEL='#'+SECTION_NAV;var SECTION_NAV_TOOLTIP='fp-tooltip';var SECTION_NAV_TOOLTIP_SEL='.'+SECTION_NAV_TOOLTIP;var SHOW_ACTIVE_TOOLTIP='fp-show-active';// slide\nvar SLIDE_DEFAULT_SEL='.slide';var SLIDE='fp-slide';var SLIDE_SEL='.'+SLIDE;var SLIDE_ACTIVE_SEL=SLIDE_SEL+ACTIVE_SEL;var SLIDES_WRAPPER='fp-slides';var SLIDES_WRAPPER_SEL='.'+SLIDES_WRAPPER;var SLIDES_CONTAINER='fp-slidesContainer';var SLIDES_CONTAINER_SEL='.'+SLIDES_CONTAINER;var TABLE='fp-table';// slide nav\nvar SLIDES_NAV='fp-slidesNav';var SLIDES_NAV_SEL='.'+SLIDES_NAV;var SLIDES_NAV_LINK_SEL=SLIDES_NAV_SEL+' a';var SLIDES_ARROW='fp-controlArrow';var SLIDES_ARROW_SEL='.'+SLIDES_ARROW;var SLIDES_PREV='fp-prev';var SLIDES_PREV_SEL='.'+SLIDES_PREV;var SLIDES_ARROW_PREV=SLIDES_ARROW+' '+SLIDES_PREV;var SLIDES_ARROW_PREV_SEL=SLIDES_ARROW_SEL+SLIDES_PREV_SEL;var SLIDES_NEXT='fp-next';var SLIDES_NEXT_SEL='.'+SLIDES_NEXT;var SLIDES_ARROW_NEXT=SLIDES_ARROW+' '+SLIDES_NEXT;var SLIDES_ARROW_NEXT_SEL=SLIDES_ARROW_SEL+SLIDES_NEXT_SEL;var $window=$(window);var $document=$(document);var defaultScrollHandler;$.fn.fullpage=function(options){//only once my friend!\nif($('html').hasClass(ENABLED)){displayWarnings();return;};// common jQuery objects\nvar $htmlBody=$('html, body');var $body=$('body');var FP=$.fn.fullpage;// Create some defaults, extending them with any options that were provided\noptions=$.extend({//navigation\nmenu:false,anchors:[],lockAnchors:false,navigation:false,navigationPosition:'right',navigationTooltips:[],showActiveTooltip:false,slidesNavigation:false,slidesNavPosition:'bottom',scrollBar:false,hybrid:false,//scrolling\ncss3:true,scrollingSpeed:700,autoScrolling:true,fitToSection:true,fitToSectionDelay:1000,easing:'easeInOutCubic',easingcss3:'ease',loopBottom:false,loopTop:false,loopHorizontal:true,continuousVertical:false,normalScrollElements:null,scrollOverflow:false,scrollOverflowHandler:defaultScrollHandler,touchSensitivity:5,normalScrollElementTouchThreshold:5,//Accessibility\nkeyboardScrolling:true,animateAnchor:true,recordHistory:true,//design\ncontrolArrows:true,controlArrowColor:'#fff',verticalCentered:true,resize:false,sectionsColor:[],paddingTop:0,paddingBottom:0,fixedElements:null,responsive:0,//backwards compabitility with responsiveWiddth\nresponsiveWidth:0,responsiveHeight:0,//Custom selectors\nsectionSelector:SECTION_DEFAULT_SEL,slideSelector:SLIDE_DEFAULT_SEL,//events\nafterLoad:null,onLeave:null,afterRender:null,afterResize:null,afterReBuild:null,afterSlideLoad:null,onSlideLeave:null},options);displayWarnings();//easeInOutCubic animation included in the plugin\n$.extend($.easing,{easeInOutCubic:function easeInOutCubic(x,t,b,c,d){if((t/=d/2)<1)return c/2*t*t*t+b;return c/2*((t-=2)*t*t+2)+b;}});/**\n        * Sets the autoScroll option.\n        * It changes the scroll bar visibility and the history of the site as a result.\n        */FP.setAutoScrolling=function(value,type){setVariableState('autoScrolling',value,type);var element=$(SECTION_ACTIVE_SEL);if(options.autoScrolling&&!options.scrollBar){$htmlBody.css({'overflow':'hidden','height':'100%'});FP.setRecordHistory(originals.recordHistory,'internal');//for IE touch devices\ncontainer.css({'-ms-touch-action':'none','touch-action':'none'});if(element.length){//moving the container up\nsilentScroll(element.position().top);}}else{$htmlBody.css({'overflow':'visible','height':'initial'});FP.setRecordHistory(false,'internal');//for IE touch devices\ncontainer.css({'-ms-touch-action':'','touch-action':''});silentScroll(0);//scrolling the page to the section with no animation\nif(element.length){$htmlBody.scrollTop(element.position().top);}}};/**\n        * Defines wheter to record the history for each hash change in the URL.\n        */FP.setRecordHistory=function(value,type){setVariableState('recordHistory',value,type);};/**\n        * Defines the scrolling speed\n        */FP.setScrollingSpeed=function(value,type){setVariableState('scrollingSpeed',value,type);};/**\n        * Sets fitToSection\n        */FP.setFitToSection=function(value,type){setVariableState('fitToSection',value,type);};/**\n        * Sets lockAnchors\n        */FP.setLockAnchors=function(value){options.lockAnchors=value;};/**\n        * Adds or remove the possiblity of scrolling through sections by using the mouse wheel or the trackpad.\n        */FP.setMouseWheelScrolling=function(value){if(value){addMouseWheelHandler();addMiddleWheelHandler();}else{removeMouseWheelHandler();removeMiddleWheelHandler();}};/**\n        * Adds or remove the possiblity of scrolling through sections by using the mouse wheel/trackpad or touch gestures.\n        * Optionally a second parameter can be used to specify the direction for which the action will be applied.\n        *\n        * @param directions string containing the direction or directions separated by comma.\n        */FP.setAllowScrolling=function(value,directions){if(typeof directions!=='undefined'){directions=directions.replace(/ /g,'').split(',');$.each(directions,function(index,direction){setIsScrollAllowed(value,direction,'m');});}else if(value){FP.setMouseWheelScrolling(true);addTouchHandler();}else{FP.setMouseWheelScrolling(false);removeTouchHandler();}};/**\n        * Adds or remove the possiblity of scrolling through sections by using the keyboard arrow keys\n        */FP.setKeyboardScrolling=function(value,directions){if(typeof directions!=='undefined'){directions=directions.replace(/ /g,'').split(',');$.each(directions,function(index,direction){setIsScrollAllowed(value,direction,'k');});}else{options.keyboardScrolling=value;}};/**\n        * Moves the page up one section.\n        */FP.moveSectionUp=function(){var prev=$(SECTION_ACTIVE_SEL).prev(SECTION_SEL);//looping to the bottom if there's no more sections above\nif(!prev.length&&(options.loopTop||options.continuousVertical)){prev=$(SECTION_SEL).last();}if(prev.length){scrollPage(prev,null,true);}};/**\n        * Moves the page down one section.\n        */FP.moveSectionDown=function(){var next=$(SECTION_ACTIVE_SEL).next(SECTION_SEL);//looping to the top if there's no more sections below\nif(!next.length&&(options.loopBottom||options.continuousVertical)){next=$(SECTION_SEL).first();}if(next.length){scrollPage(next,null,false);}};/**\n        * Moves the page to the given section and slide with no animation.\n        * Anchors or index positions can be used as params.\n        */FP.silentMoveTo=function(sectionAnchor,slideAnchor){FP.setScrollingSpeed(0,'internal');FP.moveTo(sectionAnchor,slideAnchor);FP.setScrollingSpeed(originals.scrollingSpeed,'internal');};/**\n        * Moves the page to the given section and slide.\n        * Anchors or index positions can be used as params.\n        */FP.moveTo=function(sectionAnchor,slideAnchor){var destiny=getSectionByAnchor(sectionAnchor);if(typeof slideAnchor!=='undefined'){scrollPageAndSlide(sectionAnchor,slideAnchor);}else if(destiny.length>0){scrollPage(destiny);}};/**\n        * Slides right the slider of the active section.\n        * Optional `section` param.\n        */FP.moveSlideRight=function(section){moveSlide('next',section);};/**\n        * Slides left the slider of the active section.\n        * Optional `section` param.\n        */FP.moveSlideLeft=function(section){moveSlide('prev',section);};/**\n         * When resizing is finished, we adjust the slides sizes and positions\n         */FP.reBuild=function(resizing){if(container.hasClass(DESTROYED)){return;}//nothing to do if the plugin was destroyed\nisResizing=true;var windowsWidth=$window.outerWidth();windowsHeight=$window.height();//updating global var\n//text resizing\nif(options.resize){resizeMe(windowsHeight,windowsWidth);}$(SECTION_SEL).each(function(){var slidesWrap=$(this).find(SLIDES_WRAPPER_SEL);var slides=$(this).find(SLIDE_SEL);//adjusting the height of the table-cell for IE and Firefox\nif(options.verticalCentered){$(this).find(TABLE_CELL_SEL).css('height',getTableHeight($(this))+'px');}$(this).css('height',windowsHeight+'px');//resizing the scrolling divs\nif(options.scrollOverflow){if(slides.length){slides.each(function(){createSlimScrolling($(this));});}else{createSlimScrolling($(this));}}//adjusting the position fo the FULL WIDTH slides...\nif(slides.length>1){landscapeScroll(slidesWrap,slidesWrap.find(SLIDE_ACTIVE_SEL));}});var activeSection=$(SECTION_ACTIVE_SEL);var sectionIndex=activeSection.index(SECTION_SEL);//isn't it the first section?\nif(sectionIndex){//adjusting the position for the current section\nFP.silentMoveTo(sectionIndex+1);}isResizing=false;$.isFunction(options.afterResize)&&resizing&&options.afterResize.call(container);$.isFunction(options.afterReBuild)&&!resizing&&options.afterReBuild.call(container);};/**\n        * Turns fullPage.js to normal scrolling mode when the viewport `width` or `height`\n        * are smaller than the set limit values.\n        */FP.setResponsive=function(active){var isResponsive=$body.hasClass(RESPONSIVE);if(active){if(!isResponsive){FP.setAutoScrolling(false,'internal');FP.setFitToSection(false,'internal');$(SECTION_NAV_SEL).hide();$body.addClass(RESPONSIVE);}}else if(isResponsive){FP.setAutoScrolling(originals.autoScrolling,'internal');FP.setFitToSection(originals.autoScrolling,'internal');$(SECTION_NAV_SEL).show();$body.removeClass(RESPONSIVE);}};//flag to avoid very fast sliding for landscape sliders\nvar slideMoving=false;var isTouchDevice=navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/);var isTouch='ontouchstart'in window||navigator.msMaxTouchPoints>0||navigator.maxTouchPoints;var container=$(this);var windowsHeight=$window.height();var isResizing=false;var isWindowFocused=true;var lastScrolledDestiny;var lastScrolledSlide;var canScroll=true;var scrollings=[];var nav;var controlPressed;var isScrollAllowed={};isScrollAllowed.m={'up':true,'down':true,'left':true,'right':true};isScrollAllowed.k=$.extend(true,{},isScrollAllowed.m);var originals=$.extend(true,{},options);//deep copy\n//timeouts\nvar resizeId;var afterSectionLoadsId;var afterSlideLoadsId;var scrollId;var scrollId2;var keydownId;if($(this).length){init();bindEvents();}function init(){//if css3 is not supported, it will use jQuery animations\nif(options.css3){options.css3=support3d();}options.scrollBar=options.scrollBar||options.hybrid;setOptionsFromDOM();prepareDom();FP.setAllowScrolling(true);FP.setAutoScrolling(options.autoScrolling,'internal');//the starting point is a slide?\nvar activeSlide=$(SECTION_ACTIVE_SEL).find(SLIDE_ACTIVE_SEL);//the active section isn't the first one? Is not the first slide of the first section? Then we load that section/slide by default.\nif(activeSlide.length&&($(SECTION_ACTIVE_SEL).index(SECTION_SEL)!==0||$(SECTION_ACTIVE_SEL).index(SECTION_SEL)===0&&activeSlide.index()!==0)){silentLandscapeScroll(activeSlide);}responsive();//setting the class for the body element\nsetBodyClass();$window.on('load',function(){scrollToAnchor();});}function bindEvents(){$window//when scrolling...\n.on('scroll',scrollHandler)//detecting any change on the URL to scroll to the given anchor link\n//(a way to detect back history button as we play with the hashes on the URL)\n.on('hashchange',hashChangeHandler)//when opening a new tab (ctrl + t), `control` won't be pressed when comming back.\n.blur(blurHandler)//when resizing the site, we adjust the heights of the sections, slimScroll...\n.resize(resizeHandler);$document//Sliding with arrow keys, both, vertical and horizontal\n.keydown(keydownHandler)//to prevent scrolling while zooming\n.keyup(keyUpHandler)//Scrolls to the section when clicking the navigation bullet\n.on('click touchstart',SECTION_NAV_SEL+' a',sectionBulletHandler)//Scrolls the slider to the given slide destination for the given section\n.on('click touchstart',SLIDES_NAV_LINK_SEL,slideBulletHandler).on('click',SECTION_NAV_TOOLTIP_SEL,tooltipTextHandler);//Scrolling horizontally when clicking on the slider controls.\n$(SECTION_SEL).on('click touchstart',SLIDES_ARROW_SEL,slideArrowHandler);/**\n            * Applying normalScroll elements.\n            * Ignoring the scrolls over the specified selectors.\n            */if(options.normalScrollElements){$document.on('mouseenter',options.normalScrollElements,function(){FP.setMouseWheelScrolling(false);});$document.on('mouseleave',options.normalScrollElements,function(){FP.setMouseWheelScrolling(true);});}}/**\n        * Setting options from DOM elements if they are not provided.\n        */function setOptionsFromDOM(){//no anchors option? Checking for them in the DOM attributes\nif(!options.anchors.length){options.anchors=$(options.sectionSelector+'[data-anchor]').map(function(){return $(this).data('anchor').toString();}).get();}//no tooltipos option? Checking for them in the DOM attributes\nif(!options.navigationTooltips.length){options.navigationTooltips=$(options.sectionSelector+'[data-tooltip]').map(function(){return $(this).data('tooltip').toString();}).get();}}/**\n        * Works over the DOM structure to set it up for the current fullpage optionss.\n        */function prepareDom(){container.css({'height':'100%','position':'relative'});//adding a class to recognize the container internally in the code\ncontainer.addClass(WRAPPER);$('html').addClass(ENABLED);//due to https://github.com/alvarotrigo/fullPage.js/issues/1502\nwindowsHeight=$window.height();container.removeClass(DESTROYED);//in case it was destroyed before initilizing it again\naddInternalSelectors();//styling the sections / slides / menu\n$(SECTION_SEL).each(function(index){var section=$(this);var slides=section.find(SLIDE_SEL);var numSlides=slides.length;styleSection(section,index);styleMenu(section,index);// if there's any slide\nif(numSlides>0){styleSlides(section,slides,numSlides);}else{if(options.verticalCentered){addTableClass(section);}}});//fixed elements need to be moved out of the plugin container due to problems with CSS3.\nif(options.fixedElements&&options.css3){$(options.fixedElements).appendTo($body);}//vertical centered of the navigation + active bullet\nif(options.navigation){addVerticalNavigation();}if(options.scrollOverflow){if(document.readyState==='complete'){createSlimScrollingHandler();}//after DOM and images are loaded\n$window.on('load',createSlimScrollingHandler);}else{afterRenderActions();}}/**\n        * Styles the horizontal slides for a section.\n        */function styleSlides(section,slides,numSlides){var sliderWidth=numSlides*100;var slideWidth=100/numSlides;slides.wrapAll('<div class=\"'+SLIDES_CONTAINER+'\" />');slides.parent().wrap('<div class=\"'+SLIDES_WRAPPER+'\" />');section.find(SLIDES_CONTAINER_SEL).css('width',sliderWidth+'%');if(numSlides>1){if(options.controlArrows){createSlideArrows(section);}if(options.slidesNavigation){addSlidesNavigation(section,numSlides);}}slides.each(function(index){$(this).css('width',slideWidth+'%');if(options.verticalCentered){addTableClass($(this));}});var startingSlide=section.find(SLIDE_ACTIVE_SEL);//if the slide won't be an starting point, the default will be the first one\n//the active section isn't the first one? Is not the first slide of the first section? Then we load that section/slide by default.\nif(startingSlide.length&&($(SECTION_ACTIVE_SEL).index(SECTION_SEL)!==0||$(SECTION_ACTIVE_SEL).index(SECTION_SEL)===0&&startingSlide.index()!==0)){silentLandscapeScroll(startingSlide);}else{slides.eq(0).addClass(ACTIVE);}}/**\n        * Styling vertical sections\n        */function styleSection(section,index){//if no active section is defined, the 1st one will be the default one\nif(!index&&$(SECTION_ACTIVE_SEL).length===0){section.addClass(ACTIVE);}section.css('height',windowsHeight+'px');if(options.paddingTop){section.css('padding-top',options.paddingTop);}if(options.paddingBottom){section.css('padding-bottom',options.paddingBottom);}if(typeof options.sectionsColor[index]!=='undefined'){section.css('background-color',options.sectionsColor[index]);}if(typeof options.anchors[index]!=='undefined'){section.attr('data-anchor',options.anchors[index]);}}/**\n        * Sets the data-anchor attributes to the menu elements and activates the current one.\n        */function styleMenu(section,index){if(typeof options.anchors[index]!=='undefined'){//activating the menu / nav element on load\nif(section.hasClass(ACTIVE)){activateMenuAndNav(options.anchors[index],index);}}//moving the menu outside the main container if it is inside (avoid problems with fixed positions when using CSS3 tranforms)\nif(options.menu&&options.css3&&$(options.menu).closest(WRAPPER_SEL).length){$(options.menu).appendTo($body);}}/**\n        * Adds internal classes to be able to provide customizable selectors\n        * keeping the link with the style sheet.\n        */function addInternalSelectors(){//adding internal class names to void problem with common ones\n$(options.sectionSelector).each(function(){$(this).addClass(SECTION);});$(options.slideSelector).each(function(){$(this).addClass(SLIDE);});}/**\n        * Creates the control arrows for the given section\n        */function createSlideArrows(section){section.find(SLIDES_WRAPPER_SEL).after('<div class=\"'+SLIDES_ARROW_PREV+'\"></div><div class=\"'+SLIDES_ARROW_NEXT+'\"></div>');if(options.controlArrowColor!='#fff'){section.find(SLIDES_ARROW_NEXT_SEL).css('border-color','transparent transparent transparent '+options.controlArrowColor);section.find(SLIDES_ARROW_PREV_SEL).css('border-color','transparent '+options.controlArrowColor+' transparent transparent');}if(!options.loopHorizontal){section.find(SLIDES_ARROW_PREV_SEL).hide();}}/**\n        * Creates a vertical navigation bar.\n        */function addVerticalNavigation(){$body.append('<div id=\"'+SECTION_NAV+'\"><ul></ul></div>');var nav=$(SECTION_NAV_SEL);nav.addClass(function(){return options.showActiveTooltip?SHOW_ACTIVE_TOOLTIP+' '+options.navigationPosition:options.navigationPosition;});for(var i=0;i<$(SECTION_SEL).length;i++){var link='';if(options.anchors.length){link=options.anchors[i];}var li='<li><a href=\"#'+link+'\"><span></span></a>';// Only add tooltip if needed (defined by user)\nvar tooltip=options.navigationTooltips[i];if(typeof tooltip!=='undefined'&&tooltip!==''){li+='<div class=\"'+SECTION_NAV_TOOLTIP+' '+options.navigationPosition+'\">'+tooltip+'</div>';}li+='</li>';nav.find('ul').append(li);}//centering it vertically\n$(SECTION_NAV_SEL).css('margin-top','-'+$(SECTION_NAV_SEL).height()/2+'px');//activating the current active section\n$(SECTION_NAV_SEL).find('li').eq($(SECTION_ACTIVE_SEL).index(SECTION_SEL)).find('a').addClass(ACTIVE);}/**\n        * Creates the slim scroll scrollbar for the sections and slides inside them.\n        */function createSlimScrollingHandler(){$(SECTION_SEL).each(function(){var slides=$(this).find(SLIDE_SEL);if(slides.length){slides.each(function(){createSlimScrolling($(this));});}else{createSlimScrolling($(this));}});afterRenderActions();}/**\n        * Actions and callbacks to fire afterRender\n        */function afterRenderActions(){var section=$(SECTION_ACTIVE_SEL);section.addClass(COMPLETELY);if(options.scrollOverflowHandler.afterRender){options.scrollOverflowHandler.afterRender(section);}lazyLoad(section);playMedia(section);$.isFunction(options.afterLoad)&&options.afterLoad.call(section,section.data('anchor'),section.index(SECTION_SEL)+1);$.isFunction(options.afterRender)&&options.afterRender.call(container);}var isScrolling=false;var lastScroll=0;//when scrolling...\nfunction scrollHandler(){var currentSection;if(!options.autoScrolling||options.scrollBar){var currentScroll=$window.scrollTop();var scrollDirection=getScrollDirection(currentScroll);var visibleSectionIndex=0;var screen_mid=currentScroll+$window.height()/2.0;//taking the section which is showing more content in the viewport\nvar sections=document.querySelectorAll(SECTION_SEL);for(var i=0;i<sections.length;++i){var section=sections[i];// Pick the the last section which passes the middle line of the screen.\nif(section.offsetTop<=screen_mid){visibleSectionIndex=i;}}if(isCompletelyInViewPort(scrollDirection)){if(!$(SECTION_ACTIVE_SEL).hasClass(COMPLETELY)){$(SECTION_ACTIVE_SEL).addClass(COMPLETELY).siblings().removeClass(COMPLETELY);}}//geting the last one, the current one on the screen\ncurrentSection=$(sections).eq(visibleSectionIndex);//setting the visible section as active when manually scrolling\n//executing only once the first time we reach the section\nif(!currentSection.hasClass(ACTIVE)){isScrolling=true;var leavingSection=$(SECTION_ACTIVE_SEL);var leavingSectionIndex=leavingSection.index(SECTION_SEL)+1;var yMovement=getYmovement(currentSection);var anchorLink=currentSection.data('anchor');var sectionIndex=currentSection.index(SECTION_SEL)+1;var activeSlide=currentSection.find(SLIDE_ACTIVE_SEL);if(activeSlide.length){var slideAnchorLink=activeSlide.data('anchor');var slideIndex=activeSlide.index();}if(canScroll){currentSection.addClass(ACTIVE).siblings().removeClass(ACTIVE);$.isFunction(options.onLeave)&&options.onLeave.call(leavingSection,leavingSectionIndex,sectionIndex,yMovement);$.isFunction(options.afterLoad)&&options.afterLoad.call(currentSection,anchorLink,sectionIndex);lazyLoad(currentSection);activateMenuAndNav(anchorLink,sectionIndex-1);if(options.anchors.length){//needed to enter in hashChange event when using the menu with anchor links\nlastScrolledDestiny=anchorLink;setState(slideIndex,slideAnchorLink,anchorLink,sectionIndex);}}//small timeout in order to avoid entering in hashChange event when scrolling is not finished yet\nclearTimeout(scrollId);scrollId=setTimeout(function(){isScrolling=false;},100);}if(options.fitToSection){//for the auto adjust of the viewport to fit a whole section\nclearTimeout(scrollId2);scrollId2=setTimeout(function(){//checking fitToSection again in case it was set to false before the timeout delay\nif(canScroll&&options.fitToSection){//allows to scroll to an active section and\n//if the section is already active, we prevent firing callbacks\nif($(SECTION_ACTIVE_SEL).is(currentSection)){isResizing=true;}scrollPage($(SECTION_ACTIVE_SEL));isResizing=false;}},options.fitToSectionDelay);}}}/**\n        * Determines whether the active section has seen in its whole or not.\n        */function isCompletelyInViewPort(movement){var top=$(SECTION_ACTIVE_SEL).position().top;var bottom=top+$window.height();if(movement=='up'){return bottom>=$window.scrollTop()+$window.height();}return top<=$window.scrollTop();}/**\n        * Gets the directon of the the scrolling fired by the scroll event.\n        */function getScrollDirection(currentScroll){var direction=currentScroll>lastScroll?'down':'up';lastScroll=currentScroll;return direction;}/**\n        * Determines the way of scrolling up or down:\n        * by 'automatically' scrolling a section or by using the default and normal scrolling.\n        */function scrolling(type,scrollable){if(!isScrollAllowed.m[type]){return;}var check,scrollSection;if(type=='down'){check='bottom';scrollSection=FP.moveSectionDown;}else{check='top';scrollSection=FP.moveSectionUp;}if(scrollable.length>0){//is the scrollbar at the start/end of the scroll?\nif(options.scrollOverflowHandler.isScrolled(check,scrollable)){scrollSection();}else{return true;}}else{// moved up/down\nscrollSection();}}var touchStartY=0;var touchStartX=0;var touchEndY=0;var touchEndX=0;/* Detecting touch events\n\n        * As we are changing the top property of the page on scrolling, we can not use the traditional way to detect it.\n        * This way, the touchstart and the touch moves shows an small difference between them which is the\n        * used one to determine the direction.\n        */function touchMoveHandler(event){var e=event.originalEvent;// additional: if one of the normalScrollElements isn't within options.normalScrollElementTouchThreshold hops up the DOM chain\nif(!checkParentForNormalScrollElement(event.target)&&isReallyTouch(e)){if(options.autoScrolling){//preventing the easing on iOS devices\nevent.preventDefault();}var activeSection=$(SECTION_ACTIVE_SEL);var scrollable=options.scrollOverflowHandler.scrollable(activeSection);if(canScroll&&!slideMoving){//if theres any #\nvar touchEvents=getEventsPage(e);touchEndY=touchEvents.y;touchEndX=touchEvents.x;//if movement in the X axys is greater than in the Y and the currect section has slides...\nif(activeSection.find(SLIDES_WRAPPER_SEL).length&&Math.abs(touchStartX-touchEndX)>Math.abs(touchStartY-touchEndY)){//is the movement greater than the minimum resistance to scroll?\nif(Math.abs(touchStartX-touchEndX)>$window.outerWidth()/100*options.touchSensitivity){if(touchStartX>touchEndX){if(isScrollAllowed.m.right){FP.moveSlideRight();//next\n}}else{if(isScrollAllowed.m.left){FP.moveSlideLeft();//prev\n}}}}//vertical scrolling (only when autoScrolling is enabled)\nelse if(options.autoScrolling){//is the movement greater than the minimum resistance to scroll?\nif(Math.abs(touchStartY-touchEndY)>$window.height()/100*options.touchSensitivity){if(touchStartY>touchEndY){scrolling('down',scrollable);}else if(touchEndY>touchStartY){scrolling('up',scrollable);}}}}}}/**\n         * recursive function to loop up the parent nodes to check if one of them exists in options.normalScrollElements\n         * Currently works well for iOS - Android might need some testing\n         * @param  {Element} el  target element / jquery selector (in subsequent nodes)\n         * @param  {int}     hop current hop compared to options.normalScrollElementTouchThreshold\n         * @return {boolean} true if there is a match to options.normalScrollElements\n         */function checkParentForNormalScrollElement(el,hop){hop=hop||0;var parent=$(el).parent();if(hop<options.normalScrollElementTouchThreshold&&parent.is(options.normalScrollElements)){return true;}else if(hop==options.normalScrollElementTouchThreshold){return false;}else{return checkParentForNormalScrollElement(parent,++hop);}}/**\n        * As IE >= 10 fires both touch and mouse events when using a mouse in a touchscreen\n        * this way we make sure that is really a touch event what IE is detecting.\n        */function isReallyTouch(e){//if is not IE   ||  IE is detecting `touch` or `pen`\nreturn typeof e.pointerType==='undefined'||e.pointerType!='mouse';}/**\n        * Handler for the touch start event.\n        */function touchStartHandler(event){var e=event.originalEvent;//stopping the auto scroll to adjust to a section\nif(options.fitToSection){$htmlBody.stop();}if(isReallyTouch(e)){var touchEvents=getEventsPage(e);touchStartY=touchEvents.y;touchStartX=touchEvents.x;}}/**\n        * Gets the average of the last `number` elements of the given array.\n        */function getAverage(elements,number){var sum=0;//taking `number` elements from the end to make the average, if there are not enought, 1\nvar lastElements=elements.slice(Math.max(elements.length-number,1));for(var i=0;i<lastElements.length;i++){sum=sum+lastElements[i];}return Math.ceil(sum/number);}/**\n         * Detecting mousewheel scrolling\n         *\n         * http://blogs.sitepointstatic.com/examples/tech/mouse-wheel/index.html\n         * http://www.sitepoint.com/html5-javascript-mouse-wheel/\n         */var prevTime=new Date().getTime();function MouseWheelHandler(e){var curTime=new Date().getTime();var isNormalScroll=$(COMPLETELY_SEL).hasClass(NORMAL_SCROLL);//autoscrolling and not zooming?\nif(options.autoScrolling&&!controlPressed&&!isNormalScroll){// cross-browser wheel delta\ne=e||window.event;var value=e.wheelDelta||-e.deltaY||-e.detail;var delta=Math.max(-1,Math.min(1,value));var horizontalDetection=typeof e.wheelDeltaX!=='undefined'||typeof e.deltaX!=='undefined';var isScrollingVertically=Math.abs(e.wheelDeltaX)<Math.abs(e.wheelDelta)||Math.abs(e.deltaX)<Math.abs(e.deltaY)||!horizontalDetection;//Limiting the array to 150 (lets not waste memory!)\nif(scrollings.length>149){scrollings.shift();}//keeping record of the previous scrollings\nscrollings.push(Math.abs(value));//preventing to scroll the site on mouse wheel when scrollbar is present\nif(options.scrollBar){e.preventDefault?e.preventDefault():e.returnValue=false;}var activeSection=$(SECTION_ACTIVE_SEL);var scrollable=options.scrollOverflowHandler.scrollable(activeSection);//time difference between the last scroll and the current one\nvar timeDiff=curTime-prevTime;prevTime=curTime;//haven't they scrolled in a while?\n//(enough to be consider a different scrolling action to scroll another section)\nif(timeDiff>200){//emptying the array, we dont care about old scrollings for our averages\nscrollings=[];}if(canScroll){var averageEnd=getAverage(scrollings,10);var averageMiddle=getAverage(scrollings,70);var isAccelerating=averageEnd>=averageMiddle;//to avoid double swipes...\nif(isAccelerating&&isScrollingVertically){//scrolling down?\nif(delta<0){scrolling('down',scrollable);//scrolling up?\n}else{scrolling('up',scrollable);}}}return false;}if(options.fitToSection){//stopping the auto scroll to adjust to a section\n$htmlBody.stop();}}/**\n        * Slides a slider to the given direction.\n        * Optional `section` param.\n        */function moveSlide(direction,section){var activeSection=typeof section==='undefined'?$(SECTION_ACTIVE_SEL):section;var slides=activeSection.find(SLIDES_WRAPPER_SEL);var numSlides=slides.find(SLIDE_SEL).length;// more than one slide needed and nothing should be sliding\nif(!slides.length||slideMoving||numSlides<2){return;}var currentSlide=slides.find(SLIDE_ACTIVE_SEL);var destiny=null;if(direction==='prev'){destiny=currentSlide.prev(SLIDE_SEL);}else{destiny=currentSlide.next(SLIDE_SEL);}//isn't there a next slide in the secuence?\nif(!destiny.length){//respect loopHorizontal settin\nif(!options.loopHorizontal)return;if(direction==='prev'){destiny=currentSlide.siblings(':last');}else{destiny=currentSlide.siblings(':first');}}slideMoving=true;landscapeScroll(slides,destiny);}/**\n        * Maintains the active slides in the viewport\n        * (Because he `scroll` animation might get lost with some actions, such as when using continuousVertical)\n        */function keepSlidesPosition(){$(SLIDE_ACTIVE_SEL).each(function(){silentLandscapeScroll($(this),'internal');});}var previousDestTop=0;/**\n        * Returns the destination Y position based on the scrolling direction and\n        * the height of the section.\n        */function getDestinationPosition(element){var elemPosition=element.position();//top of the desination will be at the top of the viewport\nvar position=elemPosition.top;var isScrollingDown=elemPosition.top>previousDestTop;var sectionBottom=position-windowsHeight+element.outerHeight();//is the destination element bigger than the viewport?\nif(element.outerHeight()>windowsHeight){//scrolling up?\nif(!isScrollingDown){position=sectionBottom;}}//sections equal or smaller than the viewport height && scrolling down? ||  is resizing and its in the last section\nelse if(isScrollingDown||isResizing&&element.is(':last-child')){//The bottom of the destination will be at the bottom of the viewport\nposition=sectionBottom;}/*\n            Keeping record of the last scrolled position to determine the scrolling direction.\n            No conventional methods can be used as the scroll bar might not be present\n            AND the section might not be active if it is auto-height and didnt reach the middle\n            of the viewport.\n            */previousDestTop=position;return position;}/**\n        * Scrolls the site to the given element and scrolls to the slide if a callback is given.\n        */function scrollPage(element,callback,isMovementUp){if(typeof element==='undefined'){return;}//there's no element to scroll, leaving the function\nvar dtop=getDestinationPosition(element);//local variables\nvar v={element:element,callback:callback,isMovementUp:isMovementUp,dtop:dtop,yMovement:getYmovement(element),anchorLink:element.data('anchor'),sectionIndex:element.index(SECTION_SEL),activeSlide:element.find(SLIDE_ACTIVE_SEL),activeSection:$(SECTION_ACTIVE_SEL),leavingSection:$(SECTION_ACTIVE_SEL).index(SECTION_SEL)+1,//caching the value of isResizing at the momment the function is called\n//because it will be checked later inside a setTimeout and the value might change\nlocalIsResizing:isResizing};//quiting when destination scroll is the same as the current one\nif(v.activeSection.is(element)&&!isResizing||options.scrollBar&&$window.scrollTop()===v.dtop&&!element.hasClass(AUTO_HEIGHT)){return;}if(v.activeSlide.length){var slideAnchorLink=v.activeSlide.data('anchor');var slideIndex=v.activeSlide.index();}// If continuousVertical && we need to wrap around\nif(options.autoScrolling&&options.continuousVertical&&typeof v.isMovementUp!==\"undefined\"&&(!v.isMovementUp&&v.yMovement=='up'||// Intending to scroll down but about to go up or\nv.isMovementUp&&v.yMovement=='down')){// intending to scroll up but about to go down\nv=createInfiniteSections(v);}//callback (onLeave) if the site is not just resizing and readjusting the slides\nif($.isFunction(options.onLeave)&&!v.localIsResizing){if(options.onLeave.call(v.activeSection,v.leavingSection,v.sectionIndex+1,v.yMovement)===false){return;}}stopMedia(v.activeSection);element.addClass(ACTIVE).siblings().removeClass(ACTIVE);lazyLoad(element);//preventing from activating the MouseWheelHandler event\n//more than once if the page is scrolling\ncanScroll=false;setState(slideIndex,slideAnchorLink,v.anchorLink,v.sectionIndex);performMovement(v);//flag to avoid callingn `scrollPage()` twice in case of using anchor links\nlastScrolledDestiny=v.anchorLink;//avoid firing it twice (as it does also on scroll)\nactivateMenuAndNav(v.anchorLink,v.sectionIndex);}/**\n        * Performs the movement (by CSS3 or by jQuery)\n        */function performMovement(v){// using CSS3 translate functionality\nif(options.css3&&options.autoScrolling&&!options.scrollBar){var translate3d='translate3d(0px, -'+v.dtop+'px, 0px)';transformContainer(translate3d,true);//even when the scrollingSpeed is 0 there's a little delay, which might cause the\n//scrollingSpeed to change in case of using silentMoveTo();\nif(options.scrollingSpeed){afterSectionLoadsId=setTimeout(function(){afterSectionLoads(v);},options.scrollingSpeed);}else{afterSectionLoads(v);}}// using jQuery animate\nelse{var scrollSettings=getScrollSettings(v);$(scrollSettings.element).animate(scrollSettings.options,options.scrollingSpeed,options.easing).promise().done(function(){//only one single callback in case of animating  `html, body`\nif(options.scrollBar){/* Hack!\n                        The timeout prevents setting the most dominant section in the viewport as \"active\" when the user\n                        scrolled to a smaller section by using the mousewheel (auto scrolling) rather than draging the scroll bar.\n\n                        When using scrollBar:true It seems like the scroll events still getting propagated even after the scrolling animation has finished.\n                        */setTimeout(function(){afterSectionLoads(v);},30);}else{afterSectionLoads(v);}});}}/**\n        * Gets the scrolling settings depending on the plugin autoScrolling option\n        */function getScrollSettings(v){var scroll={};if(options.autoScrolling&&!options.scrollBar){scroll.options={'top':-v.dtop};scroll.element=WRAPPER_SEL;}else{scroll.options={'scrollTop':v.dtop};scroll.element='html, body';}return scroll;}/**\n        * Adds sections before or after the current one to create the infinite effect.\n        */function createInfiniteSections(v){// Scrolling down\nif(!v.isMovementUp){// Move all previous sections to after the active section\n$(SECTION_ACTIVE_SEL).after(v.activeSection.prevAll(SECTION_SEL).get().reverse());}else{// Scrolling up\n// Move all next sections to before the active section\n$(SECTION_ACTIVE_SEL).before(v.activeSection.nextAll(SECTION_SEL));}// Maintain the displayed position (now that we changed the element order)\nsilentScroll($(SECTION_ACTIVE_SEL).position().top);// Maintain the active slides visible in the viewport\nkeepSlidesPosition();// save for later the elements that still need to be reordered\nv.wrapAroundElements=v.activeSection;// Recalculate animation variables\nv.dtop=v.element.position().top;v.yMovement=getYmovement(v.element);return v;}/**\n        * Fix section order after continuousVertical changes have been animated\n        */function continuousVerticalFixSectionOrder(v){// If continuousVertical is in effect (and autoScrolling would also be in effect then),\n// finish moving the elements around so the direct navigation will function more simply\nif(!v.wrapAroundElements||!v.wrapAroundElements.length){return;}if(v.isMovementUp){$(SECTION_FIRST_SEL).before(v.wrapAroundElements);}else{$(SECTION_LAST_SEL).after(v.wrapAroundElements);}silentScroll($(SECTION_ACTIVE_SEL).position().top);// Maintain the active slides visible in the viewport\nkeepSlidesPosition();}/**\n        * Actions to do once the section is loaded.\n        */function afterSectionLoads(v){continuousVerticalFixSectionOrder(v);v.element.find('.fp-scrollable').mouseover();//callback (afterLoad) if the site is not just resizing and readjusting the slides\n$.isFunction(options.afterLoad)&&!v.localIsResizing&&options.afterLoad.call(v.element,v.anchorLink,v.sectionIndex+1);playMedia(v.element);v.element.addClass(COMPLETELY).siblings().removeClass(COMPLETELY);canScroll=true;$.isFunction(v.callback)&&v.callback.call(this);}/**\n        * Lazy loads image, video and audio elements.\n        */function lazyLoad(destiny){var destiny=getSlideOrSection(destiny);destiny.find('img[data-src], source[data-src], audio[data-src]').each(function(){$(this).attr('src',$(this).data('src'));$(this).removeAttr('data-src');if($(this).is('source')){$(this).closest('video').get(0).load();}});}/**\n        * Plays video and audio elements.\n        */function playMedia(destiny){var destiny=getSlideOrSection(destiny);//playing HTML5 media elements\ndestiny.find('video, audio').each(function(){var element=$(this).get(0);if(element.hasAttribute('autoplay')&&typeof element.play==='function'){element.play();}});}/**\n        * Stops video and audio elements.\n        */function stopMedia(destiny){var destiny=getSlideOrSection(destiny);//stopping HTML5 media elements\ndestiny.find('video, audio').each(function(){var element=$(this).get(0);if(!element.hasAttribute('data-ignore')&&typeof element.pause==='function'){element.pause();}});}/**\n        * Gets the active slide (or section) for the given section\n        */function getSlideOrSection(destiny){var slide=destiny.find(SLIDE_ACTIVE_SEL);if(slide.length){destiny=$(slide);}return destiny;}/**\n        * Scrolls to the anchor in the URL when loading the site\n        */function scrollToAnchor(){//getting the anchor link in the URL and deleting the `#`\nvar value=window.location.hash.replace('#','').split('/');var section=value[0];var slide=value[1];if(section){//if theres any #\nif(options.animateAnchor){scrollPageAndSlide(section,slide);}else{FP.silentMoveTo(section,slide);}}}/**\n        * Detecting any change on the URL to scroll to the given anchor link\n        * (a way to detect back history button as we play with the hashes on the URL)\n        */function hashChangeHandler(){if(!isScrolling&&!options.lockAnchors){var value=window.location.hash.replace('#','').split('/');var section=value[0];var slide=value[1];//when moving to a slide in the first section for the first time (first time to add an anchor to the URL)\nvar isFirstSlideMove=typeof lastScrolledDestiny==='undefined';var isFirstScrollMove=typeof lastScrolledDestiny==='undefined'&&typeof slide==='undefined'&&!slideMoving;if(section.length){/*in order to call scrollpage() only once for each destination at a time\n                    It is called twice for each scroll otherwise, as in case of using anchorlinks `hashChange`\n                    event is fired on every scroll too.*/if(section&&section!==lastScrolledDestiny&&!isFirstSlideMove||isFirstScrollMove||!slideMoving&&lastScrolledSlide!=slide){scrollPageAndSlide(section,slide);}}}}//Sliding with arrow keys, both, vertical and horizontal\nfunction keydownHandler(e){clearTimeout(keydownId);var activeElement=$(':focus');if(!activeElement.is('textarea')&&!activeElement.is('input')&&!activeElement.is('select')&&activeElement.attr('contentEditable')!==\"true\"&&activeElement.attr('contentEditable')!==''&&options.keyboardScrolling&&options.autoScrolling){var keyCode=e.which;//preventing the scroll with arrow keys & spacebar & Page Up & Down keys\nvar keyControls=[40,38,32,33,34];if($.inArray(keyCode,keyControls)>-1){e.preventDefault();}controlPressed=e.ctrlKey;keydownId=setTimeout(function(){onkeydown(e);},150);}}function tooltipTextHandler(){$(this).prev().trigger('click');}//to prevent scrolling while zooming\nfunction keyUpHandler(e){if(isWindowFocused){//the keyup gets fired on new tab ctrl + t in Firefox\ncontrolPressed=e.ctrlKey;}}//binding the mousemove when the mouse's middle button is released\nfunction mouseDownHandler(e){//middle button\nif(e.which==2){oldPageY=e.pageY;container.on('mousemove',mouseMoveHandler);}}//unbinding the mousemove when the mouse's middle button is released\nfunction mouseUpHandler(e){//middle button\nif(e.which==2){container.off('mousemove');}}//Scrolling horizontally when clicking on the slider controls.\nfunction slideArrowHandler(){var section=$(this).closest(SECTION_SEL);if($(this).hasClass(SLIDES_PREV)){if(isScrollAllowed.m.left){FP.moveSlideLeft(section);}}else{if(isScrollAllowed.m.right){FP.moveSlideRight(section);}}}//when opening a new tab (ctrl + t), `control` won't be pressed when comming back.\nfunction blurHandler(){isWindowFocused=false;controlPressed=false;}//Scrolls to the section when clicking the navigation bullet\nfunction sectionBulletHandler(e){e.preventDefault();var index=$(this).parent().index();scrollPage($(SECTION_SEL).eq(index));}//Scrolls the slider to the given slide destination for the given section\nfunction slideBulletHandler(e){e.preventDefault();var slides=$(this).closest(SECTION_SEL).find(SLIDES_WRAPPER_SEL);var destiny=slides.find(SLIDE_SEL).eq($(this).closest('li').index());landscapeScroll(slides,destiny);}/**\n        * Keydown event\n        */function onkeydown(e){var shiftPressed=e.shiftKey;switch(e.which){//up\ncase 38:case 33:if(isScrollAllowed.k.up){FP.moveSectionUp();}break;//down\ncase 32://spacebar\nif(shiftPressed&&isScrollAllowed.k.up){FP.moveSectionUp();break;}case 40:case 34:if(isScrollAllowed.k.down){FP.moveSectionDown();}break;//Home\ncase 36:if(isScrollAllowed.k.up){FP.moveTo(1);}break;//End\ncase 35:if(isScrollAllowed.k.down){FP.moveTo($(SECTION_SEL).length);}break;//left\ncase 37:if(isScrollAllowed.k.left){FP.moveSlideLeft();}break;//right\ncase 39:if(isScrollAllowed.k.right){FP.moveSlideRight();}break;default:return;// exit this handler for other keys\n}}/**\n        * Detecting the direction of the mouse movement.\n        * Used only for the middle button of the mouse.\n        */var oldPageY=0;function mouseMoveHandler(e){if(canScroll){// moving up\nif(e.pageY<oldPageY&&isScrollAllowed.m.up){FP.moveSectionUp();}// moving down\nelse if(e.pageY>oldPageY&&isScrollAllowed.m.down){FP.moveSectionDown();}}oldPageY=e.pageY;}/**\n        * Scrolls horizontal sliders.\n        */function landscapeScroll(slides,destiny){var destinyPos=destiny.position();var slideIndex=destiny.index();var section=slides.closest(SECTION_SEL);var sectionIndex=section.index(SECTION_SEL);var anchorLink=section.data('anchor');var slidesNav=section.find(SLIDES_NAV_SEL);var slideAnchor=getAnchor(destiny);var prevSlide=section.find(SLIDE_ACTIVE_SEL);//caching the value of isResizing at the momment the function is called\n//because it will be checked later inside a setTimeout and the value might change\nvar localIsResizing=isResizing;if(options.onSlideLeave){var prevSlideIndex=prevSlide.index();var xMovement=getXmovement(prevSlideIndex,slideIndex);//if the site is not just resizing and readjusting the slides\nif(!localIsResizing&&xMovement!=='none'){if($.isFunction(options.onSlideLeave)){if(options.onSlideLeave.call(prevSlide,anchorLink,sectionIndex+1,prevSlideIndex,xMovement,slideIndex)===false){slideMoving=false;return;}}}}stopMedia(prevSlide);destiny.addClass(ACTIVE).siblings().removeClass(ACTIVE);if(!localIsResizing){lazyLoad(destiny);}if(!options.loopHorizontal&&options.controlArrows){//hidding it for the fist slide, showing for the rest\nsection.find(SLIDES_ARROW_PREV_SEL).toggle(slideIndex!==0);//hidding it for the last slide, showing for the rest\nsection.find(SLIDES_ARROW_NEXT_SEL).toggle(!destiny.is(':last-child'));}//only changing the URL if the slides are in the current section (not for resize re-adjusting)\nif(section.hasClass(ACTIVE)){setState(slideIndex,slideAnchor,anchorLink,sectionIndex);}var afterSlideLoads=function afterSlideLoads(){//if the site is not just resizing and readjusting the slides\nif(!localIsResizing){$.isFunction(options.afterSlideLoad)&&options.afterSlideLoad.call(destiny,anchorLink,sectionIndex+1,slideAnchor,slideIndex);}playMedia(destiny);//letting them slide again\nslideMoving=false;};if(options.css3){var translate3d='translate3d(-'+Math.round(destinyPos.left)+'px, 0px, 0px)';addAnimation(slides.find(SLIDES_CONTAINER_SEL),options.scrollingSpeed>0).css(getTransforms(translate3d));afterSlideLoadsId=setTimeout(function(){afterSlideLoads();},options.scrollingSpeed,options.easing);}else{slides.animate({scrollLeft:Math.round(destinyPos.left)},options.scrollingSpeed,options.easing,function(){afterSlideLoads();});}slidesNav.find(ACTIVE_SEL).removeClass(ACTIVE);slidesNav.find('li').eq(slideIndex).find('a').addClass(ACTIVE);}var previousHeight=windowsHeight;//when resizing the site, we adjust the heights of the sections, slimScroll...\nfunction resizeHandler(){//checking if it needs to get responsive\nresponsive();// rebuild immediately on touch devices\nif(isTouchDevice){var activeElement=$(document.activeElement);//if the keyboard is NOT visible\nif(!activeElement.is('textarea')&&!activeElement.is('input')&&!activeElement.is('select')){var currentHeight=$window.height();//making sure the change in the viewport size is enough to force a rebuild. (20 % of the window to avoid problems when hidding scroll bars)\nif(Math.abs(currentHeight-previousHeight)>20*Math.max(previousHeight,currentHeight)/100){FP.reBuild(true);previousHeight=currentHeight;}}}else{//in order to call the functions only when the resize is finished\n//http://stackoverflow.com/questions/4298612/jquery-how-to-call-resize-event-only-once-its-finished-resizing\nclearTimeout(resizeId);resizeId=setTimeout(function(){FP.reBuild(true);},350);}}/**\n        * Checks if the site needs to get responsive and disables autoScrolling if so.\n        * A class `fp-responsive` is added to the plugin's container in case the user wants to use it for his own responsive CSS.\n        */function responsive(){var widthLimit=options.responsive||options.responsiveWidth;//backwards compatiblity\nvar heightLimit=options.responsiveHeight;//only calculating what we need. Remember its called on the resize event.\nvar isBreakingPointWidth=widthLimit&&$window.outerWidth()<widthLimit;var isBreakingPointHeight=heightLimit&&$window.height()<heightLimit;if(widthLimit&&heightLimit){FP.setResponsive(isBreakingPointWidth||isBreakingPointHeight);}else if(widthLimit){FP.setResponsive(isBreakingPointWidth);}else if(heightLimit){FP.setResponsive(isBreakingPointHeight);}}/**\n        * Adds transition animations for the given element\n        */function addAnimation(element){var transition='all '+options.scrollingSpeed+'ms '+options.easingcss3;element.removeClass(NO_TRANSITION);return element.css({'-webkit-transition':transition,'transition':transition});}/**\n        * Remove transition animations for the given element\n        */function removeAnimation(element){return element.addClass(NO_TRANSITION);}/**\n         * Resizing of the font size depending on the window size as well as some of the images on the site.\n         */function resizeMe(displayHeight,displayWidth){//Standard dimensions, for which the body font size is correct\nvar preferredHeight=825;var preferredWidth=900;if(displayHeight<preferredHeight||displayWidth<preferredWidth){var heightPercentage=displayHeight*100/preferredHeight;var widthPercentage=displayWidth*100/preferredWidth;var percentage=Math.min(heightPercentage,widthPercentage);var newFontSize=percentage.toFixed(2);$body.css('font-size',newFontSize+'%');}else{$body.css('font-size','100%');}}/**\n         * Activating the website navigation dots according to the given slide name.\n         */function activateNavDots(name,sectionIndex){if(options.navigation){$(SECTION_NAV_SEL).find(ACTIVE_SEL).removeClass(ACTIVE);if(name){$(SECTION_NAV_SEL).find('a[href=\"#'+name+'\"]').addClass(ACTIVE);}else{$(SECTION_NAV_SEL).find('li').eq(sectionIndex).find('a').addClass(ACTIVE);}}}/**\n         * Activating the website main menu elements according to the given slide name.\n         */function activateMenuElement(name){if(options.menu){$(options.menu).find(ACTIVE_SEL).removeClass(ACTIVE);$(options.menu).find('[data-menuanchor=\"'+name+'\"]').addClass(ACTIVE);}}/**\n        * Sets to active the current menu and vertical nav items.\n        */function activateMenuAndNav(anchor,index){activateMenuElement(anchor);activateNavDots(anchor,index);}/**\n        * Retuns `up` or `down` depending on the scrolling movement to reach its destination\n        * from the current section.\n        */function getYmovement(destiny){var fromIndex=$(SECTION_ACTIVE_SEL).index(SECTION_SEL);var toIndex=destiny.index(SECTION_SEL);if(fromIndex==toIndex){return'none';}if(fromIndex>toIndex){return'up';}return'down';}/**\n        * Retuns `right` or `left` depending on the scrolling movement to reach its destination\n        * from the current slide.\n        */function getXmovement(fromIndex,toIndex){if(fromIndex==toIndex){return'none';}if(fromIndex>toIndex){return'left';}return'right';}function createSlimScrolling(element){//needed to make `scrollHeight` work under Opera 12\nelement.css('overflow','hidden');var scrollOverflowHandler=options.scrollOverflowHandler;var wrap=scrollOverflowHandler.wrapContent();//in case element is a slide\nvar section=element.closest(SECTION_SEL);var scrollable=scrollOverflowHandler.scrollable(element);var contentHeight;//if there was scroll, the contentHeight will be the one in the scrollable section\nif(scrollable.length){contentHeight=scrollOverflowHandler.scrollHeight(element);}else{contentHeight=element.get(0).scrollHeight;if(options.verticalCentered){contentHeight=element.find(TABLE_CELL_SEL).get(0).scrollHeight;}}var scrollHeight=windowsHeight-parseInt(section.css('padding-bottom'))-parseInt(section.css('padding-top'));//needs scroll?\nif(contentHeight>scrollHeight){//was there already an scroll ? Updating it\nif(scrollable.length){scrollOverflowHandler.update(element,scrollHeight);}//creating the scrolling\nelse{if(options.verticalCentered){element.find(TABLE_CELL_SEL).wrapInner(wrap);}else{element.wrapInner(wrap);}scrollOverflowHandler.create(element,scrollHeight);}}//removing the scrolling when it is not necessary anymore\nelse{scrollOverflowHandler.remove(element);}//undo\nelement.css('overflow','');}function addTableClass(element){element.addClass(TABLE).wrapInner('<div class=\"'+TABLE_CELL+'\" style=\"height:'+getTableHeight(element)+'px;\" />');}function getTableHeight(element){var sectionHeight=windowsHeight;if(options.paddingTop||options.paddingBottom){var section=element;if(!section.hasClass(SECTION)){section=element.closest(SECTION_SEL);}var paddings=parseInt(section.css('padding-top'))+parseInt(section.css('padding-bottom'));sectionHeight=windowsHeight-paddings;}return sectionHeight;}/**\n        * Adds a css3 transform property to the container class with or without animation depending on the animated param.\n        */function transformContainer(translate3d,animated){if(animated){addAnimation(container);}else{removeAnimation(container);}container.css(getTransforms(translate3d));//syncronously removing the class after the animation has been applied.\nsetTimeout(function(){container.removeClass(NO_TRANSITION);},10);}/**\n        * Gets a section by its anchor / index\n        */function getSectionByAnchor(sectionAnchor){//section\nvar section=container.find(SECTION_SEL+'[data-anchor=\"'+sectionAnchor+'\"]');if(!section.length){section=$(SECTION_SEL).eq(sectionAnchor-1);}return section;}/**\n        * Gets a slide inside a given section by its anchor / index\n        */function getSlideByAnchor(slideAnchor,section){var slides=section.find(SLIDES_WRAPPER_SEL);var slide=slides.find(SLIDE_SEL+'[data-anchor=\"'+slideAnchor+'\"]');if(!slide.length){slide=slides.find(SLIDE_SEL).eq(slideAnchor);}return slide;}/**\n        * Scrolls to the given section and slide anchors\n        */function scrollPageAndSlide(destiny,slide){var section=getSectionByAnchor(destiny);//default slide\nif(typeof slide==='undefined'){slide=0;}//we need to scroll to the section and then to the slide\nif(destiny!==lastScrolledDestiny&&!section.hasClass(ACTIVE)){scrollPage(section,function(){scrollSlider(section,slide);});}//if we were already in the section\nelse{scrollSlider(section,slide);}}/**\n        * Scrolls the slider to the given slide destination for the given section\n        */function scrollSlider(section,slideAnchor){if(typeof slideAnchor!=='undefined'){var slides=section.find(SLIDES_WRAPPER_SEL);var destiny=getSlideByAnchor(slideAnchor,section);if(destiny.length){landscapeScroll(slides,destiny);}}}/**\n        * Creates a landscape navigation bar with dots for horizontal sliders.\n        */function addSlidesNavigation(section,numSlides){section.append('<div class=\"'+SLIDES_NAV+'\"><ul></ul></div>');var nav=section.find(SLIDES_NAV_SEL);//top or bottom\nnav.addClass(options.slidesNavPosition);for(var i=0;i<numSlides;i++){nav.find('ul').append('<li><a href=\"#\"><span></span></a></li>');}//centering it\nnav.css('margin-left','-'+nav.width()/2+'px');nav.find('li').first().find('a').addClass(ACTIVE);}/**\n        * Sets the state of the website depending on the active section/slide.\n        * It changes the URL hash when needed and updates the body class.\n        */function setState(slideIndex,slideAnchor,anchorLink,sectionIndex){var sectionHash='';if(options.anchors.length&&!options.lockAnchors){//isn't it the first slide?\nif(slideIndex){if(typeof anchorLink!=='undefined'){sectionHash=anchorLink;}//slide without anchor link? We take the index instead.\nif(typeof slideAnchor==='undefined'){slideAnchor=slideIndex;}lastScrolledSlide=slideAnchor;setUrlHash(sectionHash+'/'+slideAnchor);//first slide won't have slide anchor, just the section one\n}else if(typeof slideIndex!=='undefined'){lastScrolledSlide=slideAnchor;setUrlHash(anchorLink);}//section without slides\nelse{setUrlHash(anchorLink);}}setBodyClass();}/**\n        * Sets the URL hash.\n        */function setUrlHash(url){if(options.recordHistory){location.hash=url;}else{//Mobile Chrome doesn't work the normal way, so... lets use HTML5 for phones :)\nif(isTouchDevice||isTouch){window.history.replaceState(undefined,undefined,'#'+url);}else{var baseUrl=window.location.href.split('#')[0];window.location.replace(baseUrl+'#'+url);}}}/**\n        * Gets the anchor for the given slide / section. Its index will be used if there's none.\n        */function getAnchor(element){var anchor=element.data('anchor');var index=element.index();//Slide without anchor link? We take the index instead.\nif(typeof anchor==='undefined'){anchor=index;}return anchor;}/**\n        * Sets a class for the body of the page depending on the active section / slide\n        */function setBodyClass(){var section=$(SECTION_ACTIVE_SEL);var slide=section.find(SLIDE_ACTIVE_SEL);var sectionAnchor=getAnchor(section);var slideAnchor=getAnchor(slide);var sectionIndex=section.index(SECTION_SEL);var text=String(sectionAnchor);if(slide.length){text=text+'-'+slideAnchor;}//changing slash for dash to make it a valid CSS style\ntext=text.replace('/','-').replace('#','');//removing previous anchor classes\nvar classRe=new RegExp('\\\\b\\\\s?'+VIEWING_PREFIX+'-[^\\\\s]+\\\\b',\"g\");$body[0].className=$body[0].className.replace(classRe,'');//adding the current anchor\n$body.addClass(VIEWING_PREFIX+'-'+text);}/**\n        * Checks for translate3d support\n        * @return boolean\n        * http://stackoverflow.com/questions/5661671/detecting-transform-translate3d-support\n        */function support3d(){var el=document.createElement('p'),has3d,transforms={'webkitTransform':'-webkit-transform','OTransform':'-o-transform','msTransform':'-ms-transform','MozTransform':'-moz-transform','transform':'transform'};// Add it to the body to get the computed style.\ndocument.body.insertBefore(el,null);for(var t in transforms){if(el.style[t]!==undefined){el.style[t]='translate3d(1px,1px,1px)';has3d=window.getComputedStyle(el).getPropertyValue(transforms[t]);}}document.body.removeChild(el);return has3d!==undefined&&has3d.length>0&&has3d!=='none';}/**\n        * Removes the auto scrolling action fired by the mouse wheel and trackpad.\n        * After this function is called, the mousewheel and trackpad movements won't scroll through sections.\n        */function removeMouseWheelHandler(){if(document.addEventListener){document.removeEventListener('mousewheel',MouseWheelHandler,false);//IE9, Chrome, Safari, Oper\ndocument.removeEventListener('wheel',MouseWheelHandler,false);//Firefox\ndocument.removeEventListener('MozMousePixelScroll',MouseWheelHandler,false);//old Firefox\n}else{document.detachEvent('onmousewheel',MouseWheelHandler);//IE 6/7/8\n}}/**\n        * Adds the auto scrolling action for the mouse wheel and trackpad.\n        * After this function is called, the mousewheel and trackpad movements will scroll through sections\n        * https://developer.mozilla.org/en-US/docs/Web/Events/wheel\n        */function addMouseWheelHandler(){var prefix='';var _addEventListener;if(window.addEventListener){_addEventListener=\"addEventListener\";}else{_addEventListener=\"attachEvent\";prefix='on';}// detect available wheel event\nvar support='onwheel'in document.createElement('div')?'wheel':// Modern browsers support \"wheel\"\ndocument.onmousewheel!==undefined?'mousewheel':// Webkit and IE support at least \"mousewheel\"\n'DOMMouseScroll';// let's assume that remaining browsers are older Firefox\nif(support=='DOMMouseScroll'){document[_addEventListener](prefix+'MozMousePixelScroll',MouseWheelHandler,false);}//handle MozMousePixelScroll in older Firefox\nelse{document[_addEventListener](prefix+support,MouseWheelHandler,false);}}/**\n        * Binding the mousemove when the mouse's middle button is pressed\n        */function addMiddleWheelHandler(){container.on('mousedown',mouseDownHandler).on('mouseup',mouseUpHandler);}/**\n        * Unbinding the mousemove when the mouse's middle button is released\n        */function removeMiddleWheelHandler(){container.off('mousedown',mouseDownHandler).off('mouseup',mouseUpHandler);}/**\n        * Adds the possibility to auto scroll through sections on touch devices.\n        */function addTouchHandler(){if(isTouchDevice||isTouch){//Microsoft pointers\nvar MSPointer=getMSPointer();$(WRAPPER_SEL).off('touchstart '+MSPointer.down).on('touchstart '+MSPointer.down,touchStartHandler);$(WRAPPER_SEL).off('touchmove '+MSPointer.move).on('touchmove '+MSPointer.move,touchMoveHandler);}}/**\n        * Removes the auto scrolling for touch devices.\n        */function removeTouchHandler(){if(isTouchDevice||isTouch){//Microsoft pointers\nvar MSPointer=getMSPointer();$(WRAPPER_SEL).off('touchstart '+MSPointer.down);$(WRAPPER_SEL).off('touchmove '+MSPointer.move);}}/*\n        * Returns and object with Microsoft pointers (for IE<11 and for IE >= 11)\n        * http://msdn.microsoft.com/en-us/library/ie/dn304886(v=vs.85).aspx\n        */function getMSPointer(){var pointer;//IE >= 11 & rest of browsers\nif(window.PointerEvent){pointer={down:'pointerdown',move:'pointermove'};}//IE < 11\nelse{pointer={down:'MSPointerDown',move:'MSPointerMove'};}return pointer;}/**\n        * Gets the pageX and pageY properties depending on the browser.\n        * https://github.com/alvarotrigo/fullPage.js/issues/194#issuecomment-34069854\n        */function getEventsPage(e){var events=[];events.y=typeof e.pageY!=='undefined'&&(e.pageY||e.pageX)?e.pageY:e.touches[0].pageY;events.x=typeof e.pageX!=='undefined'&&(e.pageY||e.pageX)?e.pageX:e.touches[0].pageX;//in touch devices with scrollBar:true, e.pageY is detected, but we have to deal with touch events. #1008\nif(isTouch&&isReallyTouch(e)&&options.scrollBar){events.y=e.touches[0].pageY;events.x=e.touches[0].pageX;}return events;}/**\n        * Slides silently (with no animation) the active slider to the given slide.\n        */function silentLandscapeScroll(activeSlide,noCallbacks){FP.setScrollingSpeed(0,'internal');if(typeof noCallbacks!=='undefined'){//preventing firing callbacks afterSlideLoad etc.\nisResizing=true;}landscapeScroll(activeSlide.closest(SLIDES_WRAPPER_SEL),activeSlide);if(typeof noCallbacks!=='undefined'){isResizing=false;}FP.setScrollingSpeed(originals.scrollingSpeed,'internal');}/**\n        * Scrolls silently (with no animation) the page to the given Y position.\n        */function silentScroll(top){if(options.scrollBar){container.scrollTop(top);}else if(options.css3){var translate3d='translate3d(0px, -'+top+'px, 0px)';transformContainer(translate3d,false);}else{container.css('top',-top);}}/**\n        * Returns the cross-browser transform string.\n        */function getTransforms(translate3d){return{'-webkit-transform':translate3d,'-moz-transform':translate3d,'-ms-transform':translate3d,'transform':translate3d};}/**\n        * Allowing or disallowing the mouse/swipe scroll in a given direction. (not for keyboard)\n        * @type  m (mouse) or k (keyboard)\n        */function setIsScrollAllowed(value,direction,type){switch(direction){case'up':isScrollAllowed[type].up=value;break;case'down':isScrollAllowed[type].down=value;break;case'left':isScrollAllowed[type].left=value;break;case'right':isScrollAllowed[type].right=value;break;case'all':if(type=='m'){FP.setAllowScrolling(value);}else{FP.setKeyboardScrolling(value);}}}/*\n        * Destroys fullpage.js plugin events and optinally its html markup and styles\n        */FP.destroy=function(all){FP.setAutoScrolling(false,'internal');FP.setAllowScrolling(false);FP.setKeyboardScrolling(false);container.addClass(DESTROYED);clearTimeout(afterSlideLoadsId);clearTimeout(afterSectionLoadsId);clearTimeout(resizeId);clearTimeout(scrollId);clearTimeout(scrollId2);$window.off('scroll',scrollHandler).off('hashchange',hashChangeHandler).off('resize',resizeHandler);$document.off('click',SECTION_NAV_SEL+' a').off('mouseenter',SECTION_NAV_SEL+' li').off('mouseleave',SECTION_NAV_SEL+' li').off('click',SLIDES_NAV_LINK_SEL).off('mouseover',options.normalScrollElements).off('mouseout',options.normalScrollElements);$(SECTION_SEL).off('click',SLIDES_ARROW_SEL);clearTimeout(afterSlideLoadsId);clearTimeout(afterSectionLoadsId);//lets make a mess!\nif(all){destroyStructure();}};/*\n        * Removes inline styles added by fullpage.js\n        */function destroyStructure(){//reseting the `top` or `translate` properties to 0\nsilentScroll(0);$(SECTION_NAV_SEL+', '+SLIDES_NAV_SEL+', '+SLIDES_ARROW_SEL).remove();//removing inline styles\n$(SECTION_SEL).css({'height':'','background-color':'','padding':''});$(SLIDE_SEL).css({'width':''});container.css({'height':'','position':'','-ms-touch-action':'','touch-action':''});$htmlBody.css({'overflow':'','height':''});// remove .fp-enabled class\n$('html').removeClass(ENABLED);// remove all of the .fp-viewing- classes\n$.each($body.get(0).className.split(/\\s+/),function(index,className){if(className.indexOf(VIEWING_PREFIX)===0){$body.removeClass(className);}});//removing added classes\n$(SECTION_SEL+', '+SLIDE_SEL).each(function(){options.scrollOverflowHandler.remove($(this));$(this).removeClass(TABLE+' '+ACTIVE);});removeAnimation(container);//Unwrapping content\ncontainer.find(TABLE_CELL_SEL+', '+SLIDES_CONTAINER_SEL+', '+SLIDES_WRAPPER_SEL).each(function(){//unwrap not being use in case there's no child element inside and its just text\n$(this).replaceWith(this.childNodes);});//scrolling the page to the top with no animation\n$htmlBody.scrollTop(0);//removing selectors\nvar usedSelectors=[SECTION,SLIDE,SLIDES_CONTAINER];$.each(usedSelectors,function(index,value){$('.'+value).removeClass(value);});}/*\n        * Sets the state for a variable with multiple states (original, and temporal)\n        * Some variables such as `autoScrolling` or `recordHistory` might change automatically its state when using `responsive` or `autoScrolling:false`.\n        * This function is used to keep track of both states, the original and the temporal one.\n        * If type is not 'internal', then we assume the user is globally changing the variable.\n        */function setVariableState(variable,value,type){options[variable]=value;if(type!=='internal'){originals[variable]=value;}}/**\n        * Displays warnings\n        */function displayWarnings(){if($('html').hasClass(ENABLED)){showError('error','Fullpage.js can only be initialized once and you are doing it multiple times!');return;}// Disable mutually exclusive settings\nif(options.continuousVertical&&(options.loopTop||options.loopBottom)){options.continuousVertical=false;showError('warn','Option `loopTop/loopBottom` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled');}if(options.scrollBar&&options.scrollOverflow){showError('warn','Option `scrollBar` is mutually exclusive with `scrollOverflow`. Sections with scrollOverflow might not work well in Firefox');}if(options.continuousVertical&&options.scrollBar){options.continuousVertical=false;showError('warn','Option `scrollBar` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled');}//anchors can not have the same value as any element ID or NAME\n$.each(options.anchors,function(index,name){//case insensitive selectors (http://stackoverflow.com/a/19465187/1081396)\nvar nameAttr=$document.find('[name]').filter(function(){return $(this).attr('name')&&$(this).attr('name').toLowerCase()==name.toLowerCase();});var idAttr=$document.find('[id]').filter(function(){return $(this).attr('id')&&$(this).attr('id').toLowerCase()==name.toLowerCase();});if(idAttr.length||nameAttr.length){showError('error','data-anchor tags can not have the same value as any `id` element on the site (or `name` element for IE).');idAttr.length&&showError('error','\"'+name+'\" is is being used by another element `id` property');nameAttr.length&&showError('error','\"'+name+'\" is is being used by another element `name` property');}});}/**\n        * Shows a message in the console of the given type.\n        */function showError(type,text){console&&console[type]&&console[type]('fullPage: '+text);}};/**\n     * An object to handle overflow scrolling.\n     * This uses jquery.slimScroll to accomplish overflow scrolling.\n     * It is possible to pass in an alternate scrollOverflowHandler\n     * to the fullpage.js option that implements the same functions\n     * as this handler.\n     *\n     * @type {Object}\n     */var slimScrollHandler={/**\n         * Optional function called after each render.\n         *\n         * Solves a bug with slimScroll vendor library #1037, #553\n         *\n         * @param  {object} section jQuery object containing rendered section\n         */afterRender:function afterRender(section){var slides=section.find(SLIDES_WRAPPER);var scrollableWrap=section.find(SCROLLABLE_SEL);if(slides.length){scrollableWrap=slides.find(SLIDE_ACTIVE_SEL);}scrollableWrap.mouseover();},/**\n         * Called when overflow scrolling is needed for a section.\n         *\n         * @param  {Object} element      jQuery object containing current section\n         * @param  {Number} scrollHeight Current window height in pixels\n         */create:function create(element,scrollHeight){element.find(SCROLLABLE_SEL).slimScroll({allowPageScroll:true,height:scrollHeight+'px',size:'10px',alwaysVisible:true});},/**\n         * Return a boolean depending on whether the scrollable element is a\n         * the end or at the start of the scrolling depending on the given type.\n         *\n         * @param  {String}  type       Either 'top' or 'bottom'\n         * @param  {Object}  scrollable jQuery object for the scrollable element\n         * @return {Boolean}\n         */isScrolled:function isScrolled(type,scrollable){if(type==='top'){return!scrollable.scrollTop();}else if(type==='bottom'){return scrollable.scrollTop()+1+scrollable.innerHeight()>=scrollable[0].scrollHeight;}},/**\n         * Returns the scrollable element for the given section.\n         * If there are landscape slides, will only return a scrollable element\n         * if it is in the active slide.\n         *\n         * @param  {Object}  activeSection jQuery object containing current section\n         * @return {Boolean}\n         */scrollable:function scrollable(activeSection){// if there are landscape slides, we check if the scrolling bar is in the current one or not\nif(activeSection.find(SLIDES_WRAPPER_SEL).length){return activeSection.find(SLIDE_ACTIVE_SEL).find(SCROLLABLE_SEL);}return activeSection.find(SCROLLABLE_SEL);},/**\n         * Returns the scroll height of the wrapped content.\n         * If this is larger than the window height minus section padding,\n         * overflow scrolling is needed.\n         *\n         * @param  {Object} element jQuery object containing current section\n         * @return {Number}\n         */scrollHeight:function scrollHeight(element){return element.find(SCROLLABLE_SEL).get(0).scrollHeight;},/**\n         * Called when overflow scrolling is no longer needed for a section.\n         *\n         * @param  {Object} element      jQuery object containing current section\n         */remove:function remove(element){element.find(SCROLLABLE_SEL).children().first().unwrap().unwrap();element.find(SLIMSCROLL_BAR_SEL).remove();element.find(SLIMSCROLL_RAIL_SEL).remove();},/**\n         * Called when overflow scrolling has already been setup but the\n         * window height has potentially changed.\n         *\n         * @param  {Object} element      jQuery object containing current section\n         * @param  {Number} scrollHeight Current window height in pixels\n         */update:function update(element,scrollHeight){element.find(SCROLLABLE_SEL).css('height',scrollHeight+'px').parent().css('height',scrollHeight+'px');},/**\n         * Called to get any additional elements needed to wrap the section\n         * content in order to facilitate overflow scrolling.\n         *\n         * @return {String|Object} Can be a string containing HTML,\n         *                         a DOM element, or jQuery object.\n         */wrapContent:function wrapContent(){return'<div class=\"'+SCROLLABLE+'\"></div>';}};defaultScrollHandler=slimScrollHandler;});//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }
]);